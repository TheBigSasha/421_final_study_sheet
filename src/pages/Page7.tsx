import { A4Paper, Image } from "../components/Paper";
import React from "react";
import { PageHeader } from "../components/PageHeader";
import {
  OrderedList,
  PageColumns,
  PageSection,
  TwoColumn,
} from "../components/Layout";
import { KeyValue, YesKey } from "../components/KeyValue";
import Latex from "react-latex-next";
import "katex/dist/katex.min.css";
import { FaGithub } from "react-icons/fa";
import {Example, ExampleH3, HowToH3, Info, InfoH3} from "../components/QuickSymbols";
import { InfoBox, MetaBox, WarningBox } from "../components/ThemedBoxes";
import IMG_CLUST_OR_NOT from "../assets/images/clust_or_not.png";
import IMG_MULTI_ATTR_IDXING from "../assets/images/multi_attr_idxing.png";
import IMG_SEARCH_BP_TREE from "../assets/images/search_bp_tree.png";
import IMG_SEARCH_BP_TREE_2 from "../assets/images/search_bp_tree_2.png";
import IMG_STATIC_HASH from "../assets/images/static_hash.png";
import {PigLatin} from "../components/Code";
import {PIG_LATIN_Q1, PIG_LATIN_Q6} from "../assets/Code";

export const Page7: React.FC<{}> = () => {
  return (
    <A4Paper>
      <PageHeader>
        <span>Page 7 - Pig Latin (2/2), Concurrency (1/2)</span>
        <span>
          <FaGithub />
          /TheBigSasha
        </span>
      </PageHeader>
      <PageColumns>
        <PageSection>
            <InfoH3><strong>Pig Latin data types</strong></InfoH3>
            <ul>
                <li>Atomic: string, number, etc.</li>
                <li>Tuple: <code>(a, b, c, d, ...)</code></li>
                <li>Multiset: <code>{`{(a1, b1, c1, ...), (a2, b2, c2, ...), ...}`}</code></li>
                <li>Further nesting is possible: <code>(1, (2, 3))</code></li>
                <li>Maps (advanced data type)</li>
            </ul>
            <InfoH3><strong>Pig Latin implementation</strong></InfoH3>
            <ul>
                <li><strong>Parser and query generator</strong>: everything between load and store/dump commands translates into one logical execution plan.</li>
                <li>The logical plan is a graph of Hadoop map-reduce jobs. The interpreter applies any possible optimizations to make the execution as efficient as possible.</li>
                <li>Unlike relational DBMS, the execution flow has to be defined by the user. It is not automatically generated by the interpreter.</li>
            </ul>
            <ExampleH3>Pig Latin Implemenations</ExampleH3>
            <i>A common element of many social networking applications is to find a list of friends that you have in common with another person. Many applications store the list of friends associated with a person in a structure similar to what is given below (Joe’s friends list).
                Joe, (Abe,Jane,Ali,Zack)
                Further, if Ali is a friend of Joe, with a friend list, Ali, (Sheila,Jane,Joe,Zack,Mary)
                Their common friends would be (Jane,Zack).
                It is often useful to pre-compute such lists in advance so that it is readily available when needed (say when Ali visits
                Joe’s profile page.). For example, we can store the above information as
                (Ali,Joe), (Jane,Zack)
                Where the first tuple functions as the key (used by the application to lookup), and the second tuple is the value (common friends list).
                In our simplified system, we will assume that we need to have this information only when someone visits an immediate friend’s profile page. We will also assume that any friendship is mutual. Names are unique.
                (a)Design a MapReduce workflow that will take as input the person information data set given above (assume the person’s name is the key and the friends list is the value). It should produce a pre-computed list of common friends for each pair of people who are friends. Write some simple comments in the design about your logic.</i>
            <PigLatin code={PIG_LATIN_Q1}/>
            <i>Write a Pig Latin script that finds years in which the number of movies produced were less than the previous year. You need not consider the years in which there are no previous year’s data available for it. At some point, you will have to perform a join to align the number of movies released in a year with the number of movies released in a previous year.</i>
            <PigLatin code={PIG_LATIN_Q6}/>
        </PageSection>
          <PageSection>
                <InfoH3><strong>Concurrency</strong></InfoH3>

          </PageSection>
      </PageColumns>
    </A4Paper>
  );
};
